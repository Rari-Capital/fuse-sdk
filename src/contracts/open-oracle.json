{
  "contracts": {
    "contracts/OpenOracleData.sol:OpenOracleData": {
      "abi": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506102bb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063482a619314610030575b600080fd5b61004361003e3660046101c1565b610059565b6040516100509190610253565b60405180910390f35b600080600080848060200190518101906100739190610184565b925092509250600086805190602001206040516020016100939190610222565b604051602081830303815290604052805190602001209050600181838686604051600081526020016040526040516100ce9493929190610267565b6020604051602081039080840390855afa1580156100f0573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b600082601f830112610116578081fd5b813567ffffffffffffffff8082111561012d578283fd5b604051601f8301601f19168101602001828111828210171561014d578485fd5b60405282815292508284830160200186101561016857600080fd5b8260208601602083013760006020848301015250505092915050565b600080600060608486031215610198578283fd5b8351925060208401519150604084015160ff811681146101b6578182fd5b809150509250925092565b600080604083850312156101d3578182fd5b823567ffffffffffffffff808211156101ea578384fd5b6101f686838701610106565b9350602085013591508082111561020b578283fd5b5061021885828601610106565b9150509250929050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b93845260ff929092166020840152604083015260608201526080019056fea26469706673582212202451c0eb9b8ec38c85ea55c1358ad78906a30240333582432856224bbd9cb17b64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"title\":\"The Open Oracle Data Base Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOracleData.sol\":\"OpenOracleData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/OpenOraclePriceData.sol:OpenOraclePriceData": {
      "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"priorTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"put\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b50610bbe806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338636e9a14610051578063482a61931461018457806376977a3a146102c9578063fc2525ab14610363575b600080fd5b61010f6004803603604081101561006757600080fd5b810190602081018135600160201b81111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111600160201b831117156100b457600080fd5b919390929091602081019035600160201b8111156100d157600080fd5b8201836020820111156100e357600080fd5b803590602001918460018302840111600160201b8311171561010457600080fd5b509092509050610410565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610149578181015183820152602001610131565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ad6004803603604081101561019a57600080fd5b810190602081018135600160201b8111156101b457600080fd5b8201836020820111156101c657600080fd5b803590602001918460018302840111600160201b831117156101e757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561023957600080fd5b82018360208201111561024b57600080fd5b803590602001918460018302840111600160201b8311171561026c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610446945050505050565b604080516001600160a01b039092168252519081900360200190f35b610347600480360360408110156102df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561030957600080fd5b82018360208201111561031b57600080fd5b803590602001918460018302840111600160201b8311171561033c57600080fd5b509092509050610533565b604080516001600160401b039092168252519081900360200190f35b6103e16004803603604081101561037957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a357600080fd5b8201836020820111156103b557600080fd5b803590602001918460018302840111600160201b831117156103d657600080fd5b50909250905061058c565b60405180836001600160401b03168152602001826001600160401b031681526020019250505060405180910390f35b606060008060606000610425898989896105fb565b9350935093509350610439848484846108c8565b9998505050505050505050565b60008060008084806020019051606081101561046157600080fd5b5080516020808301516040938401518a518b84012085517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081860152603c8082019290925286518082039092018252605c81018088528251928601929092206000909252607c810180885282905260ff8316609c82015260bc810186905260dc8101849052955194985091965094509260019260fc8083019392601f198301929081900390910190855afa15801561051d573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b6001600160a01b0383166000908152602081905260408082209051849084908083838082843791909101948552505060405192839003602001909220546001600160401b03600160401b90910416925050509392505050565b6000806000806000876001600160a01b03166001600160a01b0316815260200190815260200160002085856040518083838082843791909101948552505060405192839003602001909220546001600160401b038082169650600160401b909104169350505050935093915050565b600080606060008061067689898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061044692505050565b905060606000606060008c8c608081101561069057600080fd5b810190602081018135600160201b8111156106aa57600080fd5b8201836020820111156106bc57600080fd5b803590602001918460018302840111600160201b831117156106dd57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160401b03853516959094909350604081019250602001359050600160201b81111561074057600080fd5b82018360208201111561075257600080fd5b803590602001918460018302840111600160201b8311171561077357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516570726963657360d01b60208083019190915282516006818403018152602683019093528251928101929092208a519a9e50989c50939a5093356001600160401b0316985095968b96506046909201945084935050908401908083835b602083106108275780518252601f199092019160209182019101610808565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120146108b4576040805162461bcd60e51b815260206004820152601d60248201527f4b696e64206f662064617461206d757374206265202770726963657327000000604482015290519081900360640190fd5b939c919b5099509197509095505050505050565b6001600160a01b038416600090815260208181526040808320905185516060949387929182918401908083835b602083106109145780518252601f1990920191602091820191016108f5565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549093506001600160401b0390811690881611915050801561096e575042610e1001856001600160401b0316105b801561098257506001600160a01b03861615155b15610b32576040518060400160405280866001600160401b03168152602001846001600160401b0316815250600080886001600160a01b03166001600160a01b03168152602001908152602001600020856040518082805190602001908083835b60208310610a025780518252601f1990920191602091820191016109e3565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520865181549784015167ffffffffffffffff199098166001600160401b03918216176fffffffffffffffff00000000000000001916600160401b988216989098029790971790558a861685830152948816948401949094525050606080825286519082015285516001600160a01b038916927f4d3f5aa96531b83f5389343ecd20cd8ac1fba33b64634c1b547a4d85d31540d39288928a92899291829160808301919087019080838360005b83811015610af1578181015183820152602001610ad9565b50505050905090810190601f168015610b1e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2610b7e565b8054604080516001600160401b03928316815291871660208301524282820152517f7d218dba44a461fb2d7b5fe792128439313d3c48c86d4c3e4981a8eaca831a769181900360600190a15b509194935050505056fea26469706673582212200a9857a039c12a50fa7ff7475813aba2ae946d186bd535a97621faa65cdfb70064736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"priorTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"put\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"get(address,string)\":{\"params\":{\"key\":\"The selector for the value to return\",\"source\":\"The verifiable author of the data\"},\"returns\":{\"_0\":\"The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\"}},\"getPrice(address,string)\":{\"params\":{\"key\":\"The selector for the value to return\",\"source\":\"The verifiable author of the data\"},\"returns\":{\"_0\":\"The price value (defaults to 0)\"}},\"put(bytes,bytes)\":{\"params\":{\"message\":\"The payload containing the timestamp, and (key, value) pairs\",\"signature\":\"The cryptographic signature of the message payload, authorizing the source to write\"},\"returns\":{\"_0\":\"The keys that were written\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"stateVariables\":{\"data\":{\"details\":\"The most recent authenticated data from all sources.  This is private because dynamic mapping keys preclude auto-generated getters.\"}},\"title\":\"The Open Oracle Price Data Contract\",\"version\":1},\"userdoc\":{\"events\":{\"NotWritten(uint64,uint256,uint256)\":{\"notice\":\"The event emitted when the timestamp on a price is invalid and it is not written to storage\"},\"Write(address,string,uint64,uint64)\":{\"notice\":\"The event emitted when a source writes to its storage\"}},\"kind\":\"user\",\"methods\":{\"get(address,string)\":{\"notice\":\"Read a single key from an authenticated source\"},\"getPrice(address,string)\":{\"notice\":\"Read only the value for a single key from an authenticated source\"},\"put(bytes,bytes)\":{\"notice\":\"Write a bunch of signed datum to the authenticated storage mapping\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}},\"notice\":\"Values stored in this contract should represent a USD price with 6 decimals precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOraclePriceData.sol\":\"OpenOraclePriceData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/OpenOracleView.sol:OpenOracleView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506040516102c23803806102c28339818101604052604081101561003357600080fd5b81516020830180516040519294929383019291908464010000000082111561005a57600080fd5b90830190602082018581111561006f57600080fd5b825186602082028301116401000000008211171561008c57600080fd5b82525081516020918201928201910280838360005b838110156100b95781810151838201526020016100a1565b50505050905001604052505050600081511161011c576040805162461bcd60e51b815260206004820152601c60248201527f4d75737420696e697469616c697a65207769746820736f757263657300000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038416179055805161014a906001906020840190610152565b5050506101d6565b8280548282559060005260206000209081019282156101a7579160200282015b828111156101a757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610172565b506101b39291506101b7565b5090565b5b808211156101b35780546001600160a01b03191681556001016101b8565b60de806101e46000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063a3663d37146037578063e61a5fe414606d575b600080fd5b605160048036036020811015604b57600080fd5b50356073565b604080516001600160a01b039092168252519081900360200190f35b60516099565b60018181548110607f57fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03168156fea2646970667358221220661e79eddb81ec4a3c8cda6ea1240ddc3aebc84ded3cc17dcaf65a15f347f9d264736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"According to the protocol, Views must be immutable to be considered conforming.\",\"params\":{\"data_\":\"The address of the oracle data contract which is backing the view\",\"sources_\":\"The list of source addresses to include in the aggregate value\"}}},\"stateVariables\":{\"sources\":{\"details\":\"Note that while it is possible to create a view with dynamic sources,  that would not conform to the Open Oracle Standard specification.\"}},\"title\":\"The Open Oracle View Base Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Construct a view given the oracle backing address and the list of sources\",\"priceData()\":{\"notice\":\"The Oracle Data Contract backing this View\"},\"sources(uint256)\":{\"notice\":\"The static list of sources used by this View\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOracleView.sol\":\"OpenOracleView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle View Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleView {\\n    /**\\n     * @notice The Oracle Data Contract backing this View\\n     */\\n    OpenOracleData public priceData;\\n\\n    /**\\n     * @notice The static list of sources used by this View\\n     * @dev Note that while it is possible to create a view with dynamic sources,\\n     *  that would not conform to the Open Oracle Standard specification.\\n     */\\n    address[] public sources;\\n\\n    /**\\n     * @notice Construct a view given the oracle backing address and the list of sources\\n     * @dev According to the protocol, Views must be immutable to be considered conforming.\\n     * @param data_ The address of the oracle data contract which is backing the view\\n     * @param sources_ The list of source addresses to include in the aggregate value\\n     */\\n    constructor(OpenOracleData data_, address[] memory sources_) public {\\n        require(sources_.length > 0, \\\"Must initialize with sources\\\");\\n        priceData = data_;\\n        sources = sources_;\\n    }\\n}\\n\",\"keccak256\":\"0x1029fda7ff1c2753d86a476156bf0ad1c7fa1a89f6e61f2798adbff7fdcb2680\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapAnchoredView.sol:UniswapAnchoredView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"constructor\":{\"details\":\"Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\",\"params\":{\"anchorPeriod_\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\",\"anchorToleranceMantissa_\":\"The percentage tolerance that the reporter may deviate from the uniswap anchor\",\"configs\":\"The static token configurations which define what prices are supported and how\",\"reporter_\":\"The reporter whose prices are to be used\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"details\":\"If a config for the cToken is not found, falls back to searching for the underlying.\",\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbol(string)\":{\"params\":{\"symbol\":\"The symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbolHash(bytes32)\":{\"params\":{\"symbolHash\":\"The keccack256 of the symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(string,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceGuarded(string,uint256,uint256)\":{\"notice\":\"The event emitted when new prices are posted but the stored price is not updated due to the anchor\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"ReporterInvalidated(address)\":{\"notice\":\"The event emitted when reporter invalidates itself\"},\"UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigBySymbol(string)\":{\"notice\":\"Get the config for symbol\"},\"getTokenConfigBySymbolHash(bytes32)\":{\"notice\":\"Get the config for the symbolHash\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"lowerBoundAnchorRatio()\":{\"notice\":\"The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\"},\"newObservations(bytes32)\":{\"notice\":\"The new observation for each symbolHash\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(bytes32)\":{\"notice\":\"The old observation for each symbolHash\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"The Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"},\"upperBoundAnchorRatio()\":{\"notice\":\"The highest ratio of the new price to the anchor price that will still trigger the price to be updated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapAnchoredView.sol\":\"UniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../OpenOraclePriceData.sol\\\";\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapAnchoredView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    bool public constant IS_UNISWAP_ANCHORED_VIEW = true;\\r\\n\\r\\n    /// @notice The Open Oracle Price Data contract\\r\\n    OpenOraclePriceData public immutable priceData;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice The Open Oracle Reporter\\r\\n    address public immutable reporter;\\r\\n\\r\\n    /// @notice The highest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable upperBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable lowerBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\r\\n    uint public immutable anchorPeriod;\\r\\n\\r\\n    /// @notice Official prices by symbol hash\\r\\n    mapping(bytes32 => uint) public prices;\\r\\n\\r\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\r\\n    bool public reporterInvalidated;\\r\\n\\r\\n    /// @notice The old observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public oldObservations;\\r\\n\\r\\n    /// @notice The new observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public newObservations;\\r\\n\\r\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\r\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\r\\n\\r\\n    /// @notice The event emitted when the stored price is updated\\r\\n    event PriceUpdated(string symbol, uint price);\\r\\n\\r\\n    /// @notice The event emitted when anchor price is updated\\r\\n    event AnchorPriceUpdated(string symbol, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\r\\n\\r\\n    /// @notice The event emitted when the uniswap window changes\\r\\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\r\\n\\r\\n    /// @notice The event emitted when reporter invalidates itself\\r\\n    event ReporterInvalidated(address reporter);\\r\\n\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\r\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\r\\n     * @param reporter_ The reporter whose prices are to be used\\r\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\r\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    constructor(OpenOraclePriceData priceData_,\\r\\n                address reporter_,\\r\\n                uint anchorToleranceMantissa_,\\r\\n                uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs) UniswapConfig(configs) public {\\r\\n        priceData = priceData_;\\r\\n        reporter = reporter_;\\r\\n        anchorPeriod = anchorPeriod_;\\r\\n\\r\\n        // Allow the tolerance to be whatever the deployer chooses, but prevent under/overflow (and prices from being 0)\\r\\n        upperBoundAnchorRatio = anchorToleranceMantissa_ > uint(-1) - 100e16 ? uint(-1) : 100e16 + anchorToleranceMantissa_;\\r\\n        lowerBoundAnchorRatio = anchorToleranceMantissa_ < 100e16 ? 100e16 - anchorToleranceMantissa_ : 1;\\r\\n\\r\\n        // Initialize token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.REPORTER) {\\r\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\r\\n                bytes32 symbolHash = config.symbolHash;\\r\\n                uint cumulativePrice = currentCumulativePrice(config);\\r\\n                oldObservations[symbolHash].timestamp = block.timestamp;\\r\\n                newObservations[symbolHash].timestamp = block.timestamp;\\r\\n                oldObservations[symbolHash].acc = cumulativePrice;\\r\\n                newObservations[symbolHash].acc = cumulativePrice;\\r\\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\r\\n            } else {\\r\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n\\r\\n        numTokens = _configs.length;\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for a symbol\\r\\n     * @param symbol The symbol to fetch the price of\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(string memory symbol) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.priceSource == PriceSource.REPORTER) {\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            return mul(prices[config.symbolHash], ethBaseUnit) / usdPerEth;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            return mul(config.fixedPrice, ethBaseUnit) / usdPerEth;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\r\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\r\\n     * @param messages The messages to post to the oracle\\r\\n     * @param signatures The signatures for the corresponding messages\\r\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\r\\n     */\\r\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\r\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\r\\n\\r\\n        // Save the prices\\r\\n        for (uint i = 0; i < messages.length; i++) {\\r\\n            priceData.put(messages[i], signatures[i]);\\r\\n        }\\r\\n\\r\\n        uint ethPrice = fetchEthPrice();\\r\\n\\r\\n        // Try to update the view storage\\r\\n        for (uint i = 0; i < symbols.length; i++) {\\r\\n            postPriceInternal(symbols[i], ethPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function postPriceInternal(string memory symbol, uint ethPrice) internal {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        require(config.priceSource == PriceSource.REPORTER, \\\"only reporter prices get posted\\\");\\r\\n\\r\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\r\\n        uint reporterPrice = priceData.getPrice(reporter, symbol);\\r\\n        uint anchorPrice;\\r\\n        if (symbolHash == ethHash) {\\r\\n            anchorPrice = ethPrice;\\r\\n        } else {\\r\\n            anchorPrice = fetchAnchorPrice(symbol, config, ethPrice);\\r\\n        }\\r\\n\\r\\n        if (reporterInvalidated) {\\r\\n            prices[symbolHash] = anchorPrice;\\r\\n            emit PriceUpdated(symbol, anchorPrice);\\r\\n        } else if (isWithinAnchor(reporterPrice, anchorPrice)) {\\r\\n            prices[symbolHash] = reporterPrice;\\r\\n            emit PriceUpdated(symbol, reporterPrice);\\r\\n        } else {\\r\\n            emit PriceGuarded(symbol, reporterPrice, anchorPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\r\\n        if (reporterPrice > 0) {\\r\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\r\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\r\\n     */\\r\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\r\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\r\\n        if (config.isUniswapReversed) {\\r\\n            return cumulativePrice1;\\r\\n        } else {\\r\\n            return cumulativePrice0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\r\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\r\\n     */\\r\\n    function fetchEthPrice() internal returns (uint) {\\r\\n        return fetchAnchorPrice(\\\"ETH\\\", getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\r\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\r\\n     */\\r\\n    function fetchAnchorPrice(string memory symbol, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\r\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\r\\n\\r\\n        // This should be impossible, but better safe than sorry\\r\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\r\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\r\\n\\r\\n        // Calculate uniswap time-weighted average price\\r\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\r\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\r\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\r\\n        uint anchorPrice;\\r\\n\\r\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\r\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\r\\n        if (config.isUniswapReversed) {\\r\\n            // unscaledPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\\r\\n            anchorPrice = unscaledPriceMantissa / config.baseUnit;\\r\\n        } else {\\r\\n            anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\r\\n        }\\r\\n\\r\\n        emit AnchorPriceUpdated(symbol, anchorPrice, oldTimestamp, block.timestamp);\\r\\n\\r\\n        return anchorPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\r\\n     *  Update new and old observations of lagging window if period elapsed.\\r\\n     */\\r\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\r\\n        bytes32 symbolHash = config.symbolHash;\\r\\n        uint cumulativePrice = currentCumulativePrice(config);\\r\\n\\r\\n        Observation memory newObservation = newObservations[symbolHash];\\r\\n\\r\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\r\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\r\\n        if (timeElapsed >= anchorPeriod) {\\r\\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\\r\\n            oldObservations[symbolHash].acc = newObservation.acc;\\r\\n\\r\\n            newObservations[symbolHash].timestamp = block.timestamp;\\r\\n            newObservations[symbolHash].acc = cumulativePrice;\\r\\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\r\\n        }\\r\\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\r\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\r\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     */\\r\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\r\\n        (string memory decodedMessage, ) = abi.decode(message, (string, address));\\r\\n        require(keccak256(abi.encodePacked(decodedMessage)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\r\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\r\\n        reporterInvalidated = true;\\r\\n        emit ReporterInvalidated(reporter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recovers the source address which signed a message\\r\\n     * @dev Comparing to a claimed address would add nothing,\\r\\n     *  as the caller could simply perform the recover and claim that address.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     * @return The source address which signed the message, presumably\\r\\n     */\\r\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\r\\n        return ecrecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\r\\n        for (uint256 i = 0; i < _configs.length; i++) if (symbolHash == _configs[i].symbolHash) return i;\\r\\n        return uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for symbol\\r\\n     * @param symbol The symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\r\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the symbolHash\\r\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\r\\n        uint index = getSymbolHashIndex(symbolHash);\\r\\n        if (index != uint(-1)) {\\r\\n            return getTokenConfig(index);\\r\\n        }\\r\\n\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x813b225f68f984a453f7a83a95e92d31484fb4c2c97c2123a8bdebdca18d43e4\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\n        TWAP       /// implies the price is set by TWAPs (only available on UniswapView)\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public numTokens;\\n\\n    /// @dev Token config objects\\n    TokenConfig[] internal _configs;\\n\\n    /// @dev Maps underlying addresses to token config indexes\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\n\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\n    \\n    /// @notice Admin address\\n    address public admin;\\n\\n    /**\\n     * @notice Construct an immutable store of configs into the contract data\\n     * @param configs The configs for the supported assets\\n     */\\n    constructor(TokenConfig[] memory configs) public {\\n        admin = msg.sender;\\n\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = i;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n        }\\n\\n        numTokens = _configs.length;\\n    }\\n\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n        admin = newAdmin;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        return getUnderlyingIndex(CErc20(cToken).underlying());\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n        return _configs[i];\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf7625cba988504c9dbd3fcf8b82a56a4ea6ebf70873c549b22a2fe693da92256\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapConfig.sol:CErc20": {
      "abi": "[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"CErc20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\n        TWAP       /// implies the price is set by TWAPs (only available on UniswapView)\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public numTokens;\\n\\n    /// @dev Token config objects\\n    TokenConfig[] internal _configs;\\n\\n    /// @dev Maps underlying addresses to token config indexes\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\n\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\n    \\n    /// @notice Admin address\\n    address public admin;\\n\\n    /**\\n     * @notice Construct an immutable store of configs into the contract data\\n     * @param configs The configs for the supported assets\\n     */\\n    constructor(TokenConfig[] memory configs) public {\\n        admin = msg.sender;\\n\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = i;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n        }\\n\\n        numTokens = _configs.length;\\n    }\\n\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n        admin = newAdmin;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        return getUnderlyingIndex(CErc20(cToken).underlying());\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n        return _configs[i];\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf7625cba988504c9dbd3fcf8b82a56a4ea6ebf70873c549b22a2fe693da92256\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapConfig.sol:UniswapConfig": {
      "abi": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b5060405161090e38038061090e83398101604081905261002f9161027d565b600480546001600160a01b0319163317905560005b81518110156101bb57600182828151811061005b57fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b0390921691909117815591810151828401556040810151600283015560608101516003808401805493959293909260ff199091169184908111156100d457fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b031990941693909317919091169190911790558151819060029060009085908490811061013e57fe5b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060016003600084848151811061018057fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610044565b5050600154600055610352565b80516001600160a01b03811681146101df57600080fd5b92915050565b805180151581146101df57600080fd5b600060e08284031215610206578081fd5b61021060e061032c565b905061021c83836101c8565b8152602082015160208201526040820151604082015260608201516004811061024457600080fd5b6060820152608082810151908201526102608360a084016101c8565b60a08201526102728360c084016101e5565b60c082015292915050565b6000602080838503121561028f578182fd5b82516001600160401b03808211156102a5578384fd5b818501915085601f8301126102b8578384fd5b8151818111156102c6578485fd5b6102d3848583020161032c565b818152848101925083850160e0808402860187018a10156102f2578788fd5b8795505b8386101561031e576103088a836101f5565b85526001959095019493860193908101906102f6565b509098975050505050505050565b6040518181016001600160401b038111828210171561034a57600080fd5b604052919050565b6105ad806103616000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634da21942146100675780638a003888146100905780638e499bcf146100a35780638f283970146100b85780639f599631146100cd578063f851a440146100e0575b600080fd5b61007a610075366004610423565b6100f5565b60405161008791906104ee565b60405180910390f35b61007a61009e36600461045b565b61014a565b6100ab610220565b6040516100879190610556565b6100cb6100c6366004610423565b610226565b005b61007a6100db366004610423565b610272565b6100e8610314565b6040516100879190610473565b6100fd6103e6565b600061010883610323565b905060001981146101245761011c8161014a565b915050610145565b60405162461bcd60e51b815260040161013c90610487565b60405180910390fd5b919050565b6101526103e6565b60005482106101735760405162461bcd60e51b815260040161013c90610487565b6001828154811061018057fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600380830154919291606084019160ff909116908111156101dc57fe5b60038111156101e757fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b60005481565b6004546001600160a01b031633146102505760405162461bcd60e51b815260040161013c906104b7565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61027a6103e6565b60006102858361036b565b905060001981146102995761011c8161014a565b61030d836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d557600080fd5b505afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610075919061043f565b9392505050565b6004546001600160a01b031681565b6001600160a01b03811660009081526003602052604081205460ff1661034b57600019610365565b6001600160a01b0382166000908152600260205260409020545b92915050565b6000610365826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a957600080fd5b505afa1580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061043f565b610323565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b600060208284031215610434578081fd5b813561030d8161055f565b600060208284031215610450578081fd5b815161030d8161055f565b60006020828403121561046c578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e0830191906004811061052657fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b6001600160a01b038116811461057457600080fd5b5056fea2646970667358221220ca00f3e17b2e06130debe450dd33b5315d0a78d1cb667258921485f6f2bca11364736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"configs\":\"The configs for the supported assets\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"details\":\"If a config for the cToken is not found, falls back to searching for the underlying.\",\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}}},\"stateVariables\":{\"_configIndexesByUnderlying\":{\"details\":\"Maps underlying addresses to token config indexes\"},\"_configPresenceByUnderlying\":{\"details\":\"Maps underlying addresses to booleans indicating if they have token configs\"},\"_configs\":{\"details\":\"Token config objects\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"Admin address\"},\"constructor\":\"Construct an immutable store of configs into the contract data\",\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"UniswapConfig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\n        TWAP       /// implies the price is set by TWAPs (only available on UniswapView)\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public numTokens;\\n\\n    /// @dev Token config objects\\n    TokenConfig[] internal _configs;\\n\\n    /// @dev Maps underlying addresses to token config indexes\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\n\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\n    \\n    /// @notice Admin address\\n    address public admin;\\n\\n    /**\\n     * @notice Construct an immutable store of configs into the contract data\\n     * @param configs The configs for the supported assets\\n     */\\n    constructor(TokenConfig[] memory configs) public {\\n        admin = msg.sender;\\n\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = i;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n        }\\n\\n        numTokens = _configs.length;\\n    }\\n\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n        admin = newAdmin;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        return getUnderlyingIndex(CErc20(cToken).underlying());\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n        return _configs[i];\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf7625cba988504c9dbd3fcf8b82a56a4ea6ebf70873c549b22a2fe693da92256\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:FixedPoint": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a01668e4e059081649b23169477ef228812b337e1544d1b0b925a2b64c23f2d64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"FixedPoint\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:IERC20": {
      "abi": "[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:IUniswapV2Pair": {
      "abi": "[{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:UniswapV2Library": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fdfeacb3569085a88133c0b2c950e213581e67719ef017fc9a822158aa494f8264736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"UniswapV2Library\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:UniswapV2OracleLibrary": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff4cea70b81be34ed74d1b120ceccc747b20bcf0c1eccdf5fde74b9a9e25557564736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"UniswapV2OracleLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapView.sol:UniswapView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "60a06040523480156200001157600080fd5b50604051620037b8380380620037b8833981016040819052620000349162000f60565b600480546001600160a01b031916331790558160005b8151811015620001c75760018282815181106200006357fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b0390921691909117815591810151828401556040810151600283015560608101516003808401805493959293909260ff19909116918490811115620000dd57fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b03199094169390931791909116919091179055815181906002906000908590849081106200014857fe5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020819055506001600360008484815181106200018b57fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016200004a565b505060015460005560808390526004805460ff60a01b1916600160a01b8315158102919091179182905560ff910416156200021957600480546001600160a01b0319169055620002198260036200022d565b6200022482620007f0565b50505062001540565b60005b8251811015620007eb576040516020016200024b90620010fa565b604051602081830303815290604052805190602001208382815181106200026e57fe5b6020026020010151602001511415620002bf5760006001600160a01b03168382815181106200029957fe5b6020026020010151600001516001600160a01b031614620002b957600080fd5b620003ba565b828181518110620002cc57fe5b602002602001015160200151838281518110620002e557fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200032a57600080fd5b505afa1580156200033f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000369919081019062000e59565b6040516020016200037b919062001073565b6040516020818303038152906040528051906020012014620003ba5760405162461bcd60e51b8152600401620003b19062001261565b60405180910390fd5b828181518110620003c757fe5b602002602001015160400151838281518110620003e057fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200042557600080fd5b505afa1580156200043a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046091906200102e565b60ff16600a0a14620004865760405162461bcd60e51b8152600401620003b19062001309565b8160038111156200049357fe5b838281518110620004a057fe5b6020026020010151606001516003811115620004b857fe5b14620004d85760405162461bcd60e51b8152600401620003b19062001153565b828181518110620004e557fe5b602002602001015160800151600014620005135760405162461bcd60e51b8152600401620003b190620011d9565b6040516020016200052490620010fa565b604051602081830303815290604052805190602001208382815181106200054757fe5b6020026020010151602001511415620005f8578281815181106200056757fe5b602002602001015160a001516001600160a01b031673b4e16d0168e52d35cacd2c6185b44281ec28c9dc6001600160a01b031614620005ba5760405162461bcd60e51b8152600401620003b19062001109565b828181518110620005c757fe5b602002602001015160c00151620005f25760405162461bcd60e51b8152600401620003b19062001109565b620007e2565b600062000652735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f8584815181106200062057fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26200095960201b620007be1760201c565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200069057600080fd5b505afa158015620006a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006cb919062000e34565b9050816001600160a01b0316858481518110620006e457fe5b602002602001015160a001516001600160a01b031614620007195760405162461bcd60e51b8152600401620003b190620012be565b8483815181106200072657fe5b6020026020010151600001516001600160a01b0316816001600160a01b03161480156200076957508483815181106200075b57fe5b602002602001015160c00151155b80620007c057508483815181106200077d57fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614158015620007c05750848381518110620007b357fe5b602002602001015160c001515b620007df5760405162461bcd60e51b8152600401620003b1906200134a565b50505b60010162000230565b505050565b60005b815181101562000955576200080762000d2a565b8282815181106200081457fe5b602002602001015190506000816040015111620008455760405162461bcd60e51b8152600401620003b19062001197565b60a08101516003826060015160038111156200085d57fe5b141562000920576001600160a01b0381166200088d5760405162461bcd60e51b8152600401620003b19062001415565b815160006200089c84620009ce565b6001600160a01b038316600081815260066020908152604080832042808255600790935292819020828155600193840186905592909201849055905192935090917f0d485bb9561d8954891bf391edd13fa8f4db3ea3191309867ecb63debeb509a891620009109181908690819062001492565b60405180910390a250506200094a565b6001600160a01b038116156200094a5760405162461bcd60e51b8152600401620003b19062001395565b5050600101620007f3565b5050565b6000808062000969858562000a10565b915091508582826040516020016200098392919062001051565b60405160208183030381529060405280519060200120604051602001620009ac92919062001091565b60408051601f1981840301815291905280516020909101209695505050505050565b6000806000620009ed8460a0015162000aa260201b6200082e1760201c565b50915091508360c001511562000a0757915062000a0b9050565b5090505b919050565b600080826001600160a01b0316846001600160a01b0316141562000a485760405162461bcd60e51b8152600401620003b1906200121c565b826001600160a01b0316846001600160a01b03161062000a6a57828462000a6d565b83835b90925090506001600160a01b03821662000a9b5760405162461bcd60e51b8152600401620003b190620013de565b9250929050565b6000808062000ab062000ca5565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801562000aec57600080fd5b505afa15801562000b01573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b27919062000f47565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801562000b6357600080fd5b505afa15801562000b78573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9e919062000f47565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801562000bdf57600080fd5b505afa15801562000bf4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1a919062000eed565b9250925092508363ffffffff168163ffffffff161462000c9b57600081850390508063ffffffff1662000c59848662000caf60201b62000a031760201c565b600001516001600160e01b031602870196508063ffffffff1662000c89858562000caf60201b62000a031760201c565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b62000cb962000d67565b6000826001600160701b03161162000ce55760405162461bcd60e51b8152600401620003b1906200145b565b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b168162000d1457fe5b046001600160e01b031681525090505b92915050565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60408051602081019091526000815290565b80516001600160a01b038116811462000d2457600080fd5b8051801515811462000d2457600080fd5b600060e0828403121562000db4578081fd5b62000dc060e0620014ad565b905062000dce838362000d79565b8152602082015160208201526040820151604082015260608201516004811062000df757600080fd5b60608201526080828101519082015262000e158360a0840162000d79565b60a082015262000e298360c0840162000d91565b60c082015292915050565b60006020828403121562000e46578081fd5b62000e52838362000d79565b9392505050565b60006020828403121562000e6b578081fd5b81516001600160401b038082111562000e82578283fd5b818401915084601f83011262000e96578283fd5b81518181111562000ea5578384fd5b62000eba601f8201601f1916602001620014ad565b915080825285602082850101111562000ed1578384fd5b62000ee4816020840160208601620014f4565b50949350505050565b60008060006060848603121562000f02578182fd5b835162000f0f8162001527565b602085015190935062000f228162001527565b604085015190925063ffffffff8116811462000f3c578182fd5b809150509250925092565b60006020828403121562000f59578081fd5b5051919050565b60008060006060848603121562000f75578283fd5b8351602080860151919450906001600160401b0381111562000f95578384fd5b8501601f8101871362000fa6578384fd5b805162000fbd62000fb782620014d4565b620014ad565b8181528381019083850160e0808502860187018c101562000fdc578889fd5b8895505b848610156200100c5762000ff58c8362000da2565b845260019590950194928601929081019062000fe0565b5050809650505050505062001025856040860162000d91565b90509250925092565b60006020828403121562001040578081fd5b815160ff8116811462000e52578182fd5b6001600160601b0319606093841b811682529190921b16601482015260280190565b6000825162001087818460208701620014f4565b9190910192915050565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b6020808252602a908201527f45544820636f6e66696720556e6973776170206d61726b6574206973206e6f74604082015269102aa9a22197a2aa241760b11b606082015260800190565b60208082526024908201527f496e636f727265637420746f6b656e20636f6e66696720707269636520736f756040820152633931b29760e11b606082015260800190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b60208082526029908201527f6f6e6c79205457415020707269636573207574696c697a65206120556e697377604082015268185c081b585c9ad95d60ba1b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526026908201527f5457415020707269636573206d7573742068617665206120556e6973776170206040820152651b585c9ad95d60d21b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715620014cc57600080fd5b604052919050565b60006001600160401b03821115620014ea578081fd5b5060209081020190565b60005b8381101562001511578181015183820152602001620014f7565b8381111562001521576000848401525b50505050565b6001600160701b03811681146200153d57600080fd5b50565b6080516122586200156060003980610731528061168852506122586000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063aea91078116100a2578063dc9a153511610071578063dc9a15351461021e578063e9206d7814610226578063f851a4401461022e578063fc57d4df14610243578063fe16e80c1461025657610116565b8063aea91078146101e5578063b3bcdfba146101f8578063cfed246b1461020b578063d1b353b41461016e57610116565b80638a003888116100e95780638a003888146101835780638cea8c26146101965780638e499bcf146101b75780638f283970146101bf5780639f599631146101d257610116565b80632d1c668f1461011b5780633a852169146101305780634da219421461014e57806369aa3ac61461016e575b600080fd5b61012e61012936600461192b565b610269565b005b610138610460565b6040516101459190611bfa565b60405180910390f35b61016161015c366004611884565b610465565b60405161014591906120eb565b6101766104b1565b6040516101459190612153565b610161610191366004611aae565b6104bd565b6101a96101a4366004611884565b610593565b60405161014592919061215c565b6101766105ac565b61012e6101cd366004611884565b6105b2565b6101616101e0366004611884565b6105fe565b6101766101f3366004611884565b6106a0565b61012e6102063660046118bc565b6106be565b610176610219366004611884565b61070d565b61013861071f565b61017661072f565b610236610753565b6040516101459190611ba7565b610176610251366004611884565b610762565b6101a9610264366004611884565b6107a5565b600454600160a01b900460ff166102ad576004546001600160a01b031633146102ad5760405162461bcd60e51b81526004016102a490611e15565b60405180910390fd5b600454600160a01b900460ff16156102ca576102ca816003610a7f565b60005b815181101561044d5760018282815181106102e457fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b0390921691909117815591810151828401556040810151600283015560608101516003808401805493959293909260ff1990911691849081111561035d57fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b03199094169390931791909116919091179055600154825160001991909101906002906000908590859081106103d057fe5b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060016003600084848151811061041257fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016102cd565b5060015460005561045d81610fe5565b50565b600181565b61046d611775565b600061047883611139565b905060001981146104945761048c816104bd565b9150506104ac565b60405162461bcd60e51b81526004016102a490611d5d565b919050565b670de0b6b3a764000081565b6104c5611775565b60005482106104e65760405162461bcd60e51b81526004016102a490611d5d565b600182815481106104f357fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600380830154919291606084019160ff9091169081111561054f57fe5b600381111561055a57fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b6007602052600090815260409020805460019091015482565b60005481565b6004546001600160a01b031633146105dc5760405162461bcd60e51b81526004016102a490611e15565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610606611775565b60006106118361117d565b905060001981146106255761048c816104bd565b610699836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561066157600080fd5b505afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c91906118a0565b9392505050565b60006106aa611775565b6106b383610465565b9050610699816111f8565b60006106c8611332565b905060005b82811015610707576106ff8484838181106106e457fe5b90506020020160208101906106f99190611884565b83611356565b6001016106cd565b50505050565b60056020526000908152604090205481565b600454600160a01b900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031681565b600061076c611775565b610775836105fe565b90508060400151610796670de0b6b3a7640000610791846111f8565b611418565b8161079d57fe5b049392505050565b6006602052600090815260409020805460019091015482565b60008060006107cd8585611452565b915091508582826040516020016107e5929190611aff565b6040516020818303038152906040528051906020012060405160200161080c929190611b42565b60408051601f1981840301815291905280516020909101209695505050505050565b600080600061083b6114dc565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190611ac6565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e957600080fd5b505afa1580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190611ac6565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561096157600080fd5b505afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190611a5a565b9250925092508363ffffffff168163ffffffff16146109f95780840363ffffffff81166109c68486610a03565b516001600160e01b031602969096019563ffffffff81166109e78585610a03565b516001600160e01b0316029590950194505b5050509193909250565b610a0b6117b2565b6000826001600160701b031611610a345760405162461bcd60e51b81526004016102a4906120b4565b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b1681610a6957fe5b046001600160e01b031681525090505b92915050565b60005b8251811015610fe057604051602001610a9a90611b98565b60405160208183030381529060405280519060200120838281518110610abc57fe5b6020026020010151602001511415610b095760006001600160a01b0316838281518110610ae557fe5b6020026020010151600001516001600160a01b031614610b0457600080fd5b610bf0565b828181518110610b1557fe5b602002602001015160200151838281518110610b2d57fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bad91908101906119ce565b604051602001610bbd9190611b26565b6040516020818303038152906040528051906020012014610bf05760405162461bcd60e51b81526004016102a490611e4c565b828181518110610bfc57fe5b602002602001015160400151838281518110610c1457fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5857600080fd5b505afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611ade565b60ff16600a0a14610cb35760405162461bcd60e51b81526004016102a490611f2b565b816003811115610cbf57fe5b838281518110610ccb57fe5b6020026020010151606001516003811115610ce257fe5b14610cff5760405162461bcd60e51b81526004016102a490611c4f565b828181518110610d0b57fe5b602002602001015160800151600014610d365760405162461bcd60e51b81526004016102a490611d8d565b604051602001610d4590611b98565b60405160208183030381529060405280519060200120838281518110610d6757fe5b6020026020010151602001511415610e0e57828181518110610d8557fe5b602002602001015160a001516001600160a01b031673b4e16d0168e52d35cacd2c6185b44281ec28c9dc6001600160a01b031614610dd55760405162461bcd60e51b81526004016102a490611c05565b828181518110610de157fe5b602002602001015160c00151610e095760405162461bcd60e51b81526004016102a490611c05565b610fd8565b6000610e5a735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f858481518110610e3457fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26107be565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9757600080fd5b505afa158015610eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecf91906118a0565b9050816001600160a01b0316858481518110610ee757fe5b602002602001015160a001516001600160a01b031614610f195760405162461bcd60e51b81526004016102a490611ea9565b848381518110610f2557fe5b6020026020010151600001516001600160a01b0316816001600160a01b0316148015610f665750848381518110610f5857fe5b602002602001015160c00151155b80610fb95750848381518110610f7857fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614158015610fb95750848381518110610fac57fe5b602002602001015160c001515b610fd55760405162461bcd60e51b81526004016102a490611fa3565b50505b600101610a82565b505050565b60005b815181101561113557610ff9611775565b82828151811061100557fe5b6020026020010151905060008160400151116110335760405162461bcd60e51b81526004016102a490611c93565b60a081015160038260600151600381111561104a57fe5b1415611104576001600160a01b0381166110765760405162461bcd60e51b81526004016102a49061206e565b81516000611083846114e6565b6001600160a01b038316600081815260066020908152604080832042808255600790935292819020828155600193840186905592909201849055905192935090917f0d485bb9561d8954891bf391edd13fa8f4db3ea3191309867ecb63debeb509a8916110f59181908690819061216a565b60405180910390a2505061112b565b6001600160a01b0381161561112b5760405162461bcd60e51b81526004016102a490611fee565b5050600101610fe8565b5050565b6001600160a01b03811660009081526003602052604081205460ff1661116157600019610a79565b506001600160a01b031660009081526002602052604090205490565b6000610a79826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bb57600080fd5b505afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f391906118a0565b611139565b600060038260600151600381111561120c57fe5b1415611298576000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc548061125a5760405162461bcd60e51b81526004016102a490611cd5565b82516001600160a01b0316600090815260056020526040902054819061128890670de0b6b3a7640000611418565b8161128f57fe5b049150506104ac565b6001826060015160038111156112aa57fe5b141561130f576000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc54806112f85760405162461bcd60e51b81526004016102a490611cd5565b806112888460800151670de0b6b3a7640000611418565b60008260600151600381111561132157fe5b14156104ac575060808101516104ac565b600061135160006113436000610465565b670de0b6b3a7640000611518565b905090565b61135e611775565b61136783610465565b905060038160600151600381111561137b57fe5b146113985760405162461bcd60e51b81526004016102a490611f6c565b60006001600160a01b0384166113af5750816113bd565b6113ba848385611518565b90505b6001600160a01b03841660009081526005602052604090819020829055517f0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b849061140a9086908490611bbb565b60405180910390a150505050565b60008261142757506000610a79565b8282028284828161143457fe5b04146106995760405162461bcd60e51b81526004016102a490611d26565b600080826001600160a01b0316846001600160a01b031614156114875760405162461bcd60e51b81526004016102a490611dd0565b826001600160a01b0316846001600160a01b0316106114a75782846114aa565b83835b90925090506001600160a01b0382166114d55760405162461bcd60e51b81526004016102a490612037565b9250929050565b63ffffffff421690565b60008060006114f88460a0015161082e565b50915091508360c00151156115105791506104ac9050565b5090506104ac565b60008060008061152786611630565b92509250925080421161154c5760405162461bcd60e51b81526004016102a490611ef4565b428190036115586117b2565b6040518060200160405280838688038161156e57fe5b046001600160e01b0316815250905060006115888261175d565b90506000611596828a611418565b905060008a60c00151156115b9578a6040015182816115b157fe5b0490506115e4565b670de0b6b3a7640000806115d1848e60400151611418565b816115d857fe5b04816115e057fe5b0490505b7f7d881580fb2bb7844e8ecf8df26510247c4bbea2735d40bf0d9ac33c0d9acd818c8288426040516116199493929190611bd4565b60405180910390a19b9a5050505050505050505050565b80516000908190819081611643866114e6565b905061164d6117c4565b506001600160a01b038216600090815260076020908152604091829020825180840190935280548084526001909101549183019190915242037f0000000000000000000000000000000000000000000000000000000000000000811061172d5781516001600160a01b03808616600090815260066020908152604080832094855581870180516001968701556007909252918290204280825594018790558b518651915192519316937f0d485bb9561d8954891bf391edd13fa8f4db3ea3191309867ecb63debeb509a8936117249390899061216a565b60405180910390a25b50506001600160a01b03909116600090815260066020526040902060018101549054919450925090509193909250565b516612725dd1d243ab6001600160e01b039091160490565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60408051602081019091526000815290565b604051806040016040528060008152602001600081525090565b8035610a79816121f8565b80358015158114610a7957600080fd5b600060e0828403121561180a578081fd5b61181460e0612185565b90508135611821816121f8565b80825250602082013560208201526040820135604082015260608201356004811061184b57600080fd5b6060820152608082810135908201526118678360a084016117de565b60a08201526118798360c084016117e9565b60c082015292915050565b600060208284031215611895578081fd5b8135610699816121f8565b6000602082840312156118b1578081fd5b8151610699816121f8565b600080602083850312156118ce578081fd5b823567ffffffffffffffff808211156118e5578283fd5b818501915085601f8301126118f8578283fd5b813581811115611906578384fd5b8660208083028501011115611919578384fd5b60209290920196919550909350505050565b6000602080838503121561193d578182fd5b823567ffffffffffffffff811115611953578283fd5b8301601f81018513611963578283fd5b8035611976611971826121ac565b612185565b8181528381019083850160e0808502860187018a1015611994578788fd5b8795505b848610156119c0576119aa8a836117f9565b8452600195909501949286019290810190611998565b509098975050505050505050565b6000602082840312156119df578081fd5b815167ffffffffffffffff808211156119f6578283fd5b818401915084601f830112611a09578283fd5b815181811115611a17578384fd5b611a2a601f8201601f1916602001612185565b9150808252856020828501011115611a40578384fd5b611a518160208401602086016121cc565b50949350505050565b600080600060608486031215611a6e578081fd5b8351611a798161220d565b6020850151909350611a8a8161220d565b604085015190925063ffffffff81168114611aa3578182fd5b809150509250925092565b600060208284031215611abf578081fd5b5035919050565b600060208284031215611ad7578081fd5b5051919050565b600060208284031215611aef578081fd5b815160ff81168114610699578182fd5b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60008251611b388184602087016121cc565b9190910192915050565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b6020808252602a908201527f45544820636f6e66696720556e6973776170206d61726b6574206973206e6f74604082015269102aa9a22197a2aa241760b11b606082015260800190565b60208082526024908201527f496e636f727265637420746f6b656e20636f6e66696720707269636520736f756040820152633931b29760e11b606082015260800190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526031908201527f455448207072696365206e6f74207365742c2063616e6e6f7420636f6e7665726040820152700e840cce4deda40aaa68840e8de408aa89607b1b606082015260800190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b6020808252601a908201527f6e6f77206d75737420636f6d65206166746572206265666f7265000000000000604082015260600190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b6020808252601b908201527f6f6e6c792054574150207072696365732067657420706f737465640000000000604082015260600190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b60208082526029908201527f6f6e6c79205457415020707269636573207574696c697a65206120556e697377604082015268185c081b585c9ad95d60ba1b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526026908201527f5457415020707269636573206d7573742068617665206120556e6973776170206040820152651b585c9ad95d60d21b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e0830191906004811061212357fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156121a457600080fd5b604052919050565b600067ffffffffffffffff8211156121c2578081fd5b5060209081020190565b60005b838110156121e75781810151838201526020016121cf565b838111156107075750506000910152565b6001600160a01b038116811461045d57600080fd5b6001600160701b038116811461045d57600080fdfea2646970667358221220abaa3654a52f2d5754c8b499f934abd7f7abc16319a4043ac1b07b72e09d320964736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"constructor\":{\"details\":\"Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\",\"params\":{\"_isPublic\":\"If true, anyone can add assets, but they will be validated\",\"anchorPeriod_\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\",\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"details\":\"If a config for the cToken is not found, falls back to searching for the underlying.\",\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"postPrices(address[])\":{\"details\":\"We let anyone pay to post anything, but only prices from Uniswap will be stored in the view.\",\"params\":{\"underlyings\":\"The underlying token addresses for which to get and post TWAPs\"}},\"price(address)\":{\"params\":{\"underlying\":\"The underlying token address for which to get the price (set to zero address for ETH)\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}}},\"stateVariables\":{\"UNISWAP_V2_FACTORY_ADDRESS\":{\"details\":\"UniswapV2Factory contract address.\"},\"WETH_ADDRESS\":{\"details\":\"WETH contract address.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(address,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceUpdated(address,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"UniswapWindowUpdated(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"isPublic()\":{\"notice\":\"If new token configs can be added by anyone\"},\"newObservations(address)\":{\"notice\":\"The new observation for each underlying\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(address)\":{\"notice\":\"The old observation for each underlying\"},\"postPrices(address[])\":{\"notice\":\"Update Uniswap TWAP prices\"},\"price(address)\":{\"notice\":\"Get the official price for an underlying token address\"},\"prices(address)\":{\"notice\":\"Official prices by underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapView.sol\":\"UniswapView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\n        TWAP       /// implies the price is set by TWAPs (only available on UniswapView)\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public numTokens;\\n\\n    /// @dev Token config objects\\n    TokenConfig[] internal _configs;\\n\\n    /// @dev Maps underlying addresses to token config indexes\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\n\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\n    \\n    /// @notice Admin address\\n    address public admin;\\n\\n    /**\\n     * @notice Construct an immutable store of configs into the contract data\\n     * @param configs The configs for the supported assets\\n     */\\n    constructor(TokenConfig[] memory configs) public {\\n        admin = msg.sender;\\n\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = i;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n        }\\n\\n        numTokens = _configs.length;\\n    }\\n\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n        admin = newAdmin;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        return getUnderlyingIndex(CErc20(cToken).underlying());\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n        return _configs[i];\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf7625cba988504c9dbd3fcf8b82a56a4ea6ebf70873c549b22a2fe693da92256\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./UniswapConfig.sol\\\";\\nimport \\\"./UniswapLib.sol\\\";\\n\\nstruct Observation {\\n    uint timestamp;\\n    uint acc;\\n}\\n\\ncontract UniswapView is UniswapConfig {\\n    using FixedPoint for *;\\n    \\n    bool constant public IS_UNISWAP_VIEW = true;\\n\\n    /// @notice The number of wei in 1 ETH\\n    uint public constant ethBaseUnit = 1e18;\\n\\n    /// @notice A common scaling factor to maintain precision\\n    uint public constant expScale = 1e18;\\n\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\n    uint public immutable anchorPeriod;\\n\\n    /// @notice If new token configs can be added by anyone\\n    bool public isPublic;\\n\\n    /// @notice Official prices by underlying\\n    mapping(address => uint) public prices;\\n\\n    /// @notice The old observation for each underlying\\n    mapping(address => Observation) public oldObservations;\\n\\n    /// @notice The new observation for each underlying\\n    mapping(address => Observation) public newObservations;\\n\\n    /// @notice The event emitted when the stored price is updated\\n    event PriceUpdated(address underlying, uint price);\\n\\n    /// @notice The event emitted when anchor price is updated\\n    event AnchorPriceUpdated(address underlying, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\n\\n    /// @notice The event emitted when the uniswap window changes\\n    event UniswapWindowUpdated(address indexed underlying, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\n\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n\\n    /**\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\n     * @param configs The static token configurations which define what prices are supported and how\\n     * @param _isPublic If true, anyone can add assets, but they will be validated\\n     */\\n    constructor(uint anchorPeriod_,\\n                TokenConfig[] memory configs,\\n                bool _isPublic) UniswapConfig(configs) public {\\n        anchorPeriod = anchorPeriod_;\\n        isPublic = _isPublic;\\n\\n        if (isPublic) {\\n            admin = address(0);\\n            checkTokenConfigs(configs, PriceSource.TWAP);\\n        }\\n\\n        initConfigs(configs);\\n    }\\n\\n    /**\\n     * @dev UniswapV2Factory contract address.\\n     */\\n    address constant private UNISWAP_V2_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    \\n    /**\\n     * @dev WETH contract address.\\n     */\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /**\\n     * @dev Verifies token configs\\n     * @param configs The configs for the supported assets\\n     * @param priceSource The required price source for all assets\\n     */\\n    function checkTokenConfigs(TokenConfig[] memory configs, PriceSource priceSource) internal view {\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            // Check symbolHash against underlying symbol\\n            if (configs[i].symbolHash == ethHash) require(configs[i].underlying == address(0));\\n            else require(keccak256(abi.encodePacked(IERC20(configs[i].underlying).symbol())) == configs[i].symbolHash, \\\"Symbol mismatch between token config and ERC20 symbol method.\\\");\\n\\n            // Check baseUnit against underlying decimals\\n            require(10 ** uint256(IERC20(configs[i].underlying).decimals()) == configs[i].baseUnit, \\\"Incorrect token config base unit.\\\");\\n\\n            // Check price source\\n            require(configs[i].priceSource == priceSource, \\\"Incorrect token config price source.\\\");\\n\\n            // Check fixed price\\n            require(configs[i].fixedPrice == 0, \\\"Token config fixed price must be 0.\\\");\\n\\n            // Check uniswapMarket and isUniswapReversed\\n            if (configs[i].symbolHash == ethHash) {\\n                require(configs[i].uniswapMarket == 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc, \\\"ETH config Uniswap market is not USDC/ETH.\\\");\\n                require(configs[i].isUniswapReversed, \\\"ETH config Uniswap market is not USDC/ETH.\\\");\\n            } else {\\n                IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_FACTORY_ADDRESS, configs[i].underlying, WETH_ADDRESS));\\n                address token0 = pair.token0();\\n                require(configs[i].uniswapMarket == address(pair), \\\"Token config Uniswap market is not correct.\\\");\\n                require((token0 == configs[i].underlying && !configs[i].isUniswapReversed) || (token0 != configs[i].underlying && configs[i].isUniswapReversed), \\\"Token config Uniswap reversal is incorrect.\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Initialize token configs\\n     * @param configs The static token configurations which define what prices are supported and how\\n     */\\n    function initConfigs(TokenConfig[] memory configs) internal {\\n        for (uint i = 0; i < configs.length; i++) {\\n            TokenConfig memory config = configs[i];\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\n            address uniswapMarket = config.uniswapMarket;\\n            if (config.priceSource == PriceSource.TWAP) {\\n                require(uniswapMarket != address(0), \\\"TWAP prices must have a Uniswap market\\\");\\n                address underlying = config.underlying;\\n                uint cumulativePrice = currentCumulativePrice(config);\\n                oldObservations[underlying].timestamp = block.timestamp;\\n                newObservations[underlying].timestamp = block.timestamp;\\n                oldObservations[underlying].acc = cumulativePrice;\\n                newObservations[underlying].acc = cumulativePrice;\\n                emit UniswapWindowUpdated(underlying, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\n            } else {\\n                require(uniswapMarket == address(0), \\\"only TWAP prices utilize a Uniswap market\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Add new asset(s)\\n     * @param configs The static token configurations which define what prices are supported and how\\n     */\\n    function add(TokenConfig[] memory configs) external {\\n        if (!isPublic) require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n        if (isPublic) checkTokenConfigs(configs, PriceSource.TWAP);\\n\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n        }\\n\\n        numTokens = _configs.length;\\n        initConfigs(configs);\\n    }\\n\\n    /**\\n     * @notice Get the official price for an underlying token address\\n     * @param underlying The underlying token address for which to get the price (set to zero address for ETH)\\n     * @return Price denominated in ETH, with 18 decimals\\n     */\\n    function price(address underlying) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\n        return priceInternal(config);\\n    }\\n\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\n        if (config.priceSource == PriceSource.TWAP) {\\n            uint usdPerEth = prices[address(0)];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\n            return mul(prices[config.underlying], ethBaseUnit) / usdPerEth;\\n        }\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\n            uint usdPerEth = prices[address(0)];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\n            return mul(config.fixedPrice, ethBaseUnit) / usdPerEth;\\n        }\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\n    }\\n\\n    /**\\n     * @notice Update Uniswap TWAP prices\\n     * @dev We let anyone pay to post anything, but only prices from Uniswap will be stored in the view.\\n     * @param underlyings The underlying token addresses for which to get and post TWAPs\\n     */\\n    function postPrices(address[] calldata underlyings) external {\\n        uint ethPrice = fetchEthPrice();\\n\\n        // Try to update the view storage\\n        for (uint i = 0; i < underlyings.length; i++) {\\n            postPriceInternal(underlyings[i], ethPrice);\\n        }\\n    }\\n\\n    function postPriceInternal(address underlying, uint ethPrice) internal {\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\n        require(config.priceSource == PriceSource.TWAP, \\\"only TWAP prices get posted\\\");\\n\\n        uint anchorPrice;\\n        if (underlying == address(0)) {\\n            anchorPrice = ethPrice;\\n        } else {\\n            anchorPrice = fetchAnchorPrice(underlying, config, ethPrice);\\n        }\\n\\n        prices[underlying] = anchorPrice;\\n        emit PriceUpdated(underlying, anchorPrice);\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\n     */\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\n        if (config.isUniswapReversed) {\\n            return cumulativePrice1;\\n        } else {\\n            return cumulativePrice0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\n     */\\n    function fetchEthPrice() internal returns (uint) {\\n        return fetchAnchorPrice(address(0), getTokenConfigByUnderlying(address(0)), ethBaseUnit);\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\n     */\\n    function fetchAnchorPrice(address underlying, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\n\\n        // This should be impossible, but better safe than sorry\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\n\\n        // Calculate uniswap time-weighted average price\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\n        uint anchorPrice;\\n\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\n        if (config.isUniswapReversed) {\\n            // unscaledPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\\n            anchorPrice = unscaledPriceMantissa / config.baseUnit;\\n        } else {\\n            anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\n        }\\n\\n        emit AnchorPriceUpdated(underlying, anchorPrice, oldTimestamp, block.timestamp);\\n\\n        return anchorPrice;\\n    }\\n\\n    /**\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\n     *  Update new and old observations of lagging window if period elapsed.\\n     */\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\n        address underlying = config.underlying;\\n        uint cumulativePrice = currentCumulativePrice(config);\\n\\n        Observation memory newObservation = newObservations[underlying];\\n\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\n        if (timeElapsed >= anchorPeriod) {\\n            oldObservations[underlying].timestamp = newObservation.timestamp;\\n            oldObservations[underlying].acc = newObservation.acc;\\n\\n            newObservations[underlying].timestamp = block.timestamp;\\n            newObservations[underlying].acc = cumulativePrice;\\n            emit UniswapWindowUpdated(config.underlying, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\n        }\\n        return (cumulativePrice, oldObservations[underlying].acc, oldObservations[underlying].timestamp);\\n    }\\n\\n    /// @dev Overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xac15cf1ee82920046f87ba5f6cf1a5ad5566c994f64a3e4ce1c420ddd3fbec12\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/MockUniswapAnchoredView.sol:MockUniswapAnchoredView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"details\":\"If a config for the cToken is not found, falls back to searching for the underlying.\",\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbol(string)\":{\"params\":{\"symbol\":\"The symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbolHash(bytes32)\":{\"params\":{\"symbolHash\":\"The keccack256 of the symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(string,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceGuarded(string,uint256,uint256)\":{\"notice\":\"The event emitted when new prices are posted but the stored price is not updated due to the anchor\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"ReporterInvalidated(address)\":{\"notice\":\"The event emitted when reporter invalidates itself\"},\"UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigBySymbol(string)\":{\"notice\":\"Get the config for symbol\"},\"getTokenConfigBySymbolHash(bytes32)\":{\"notice\":\"Get the config for the symbolHash\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"lowerBoundAnchorRatio()\":{\"notice\":\"The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\"},\"newObservations(bytes32)\":{\"notice\":\"The new observation for each symbolHash\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(bytes32)\":{\"notice\":\"The old observation for each symbolHash\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"The Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"},\"upperBoundAnchorRatio()\":{\"notice\":\"The highest ratio of the new price to the anchor price that will still trigger the price to be updated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapAnchoredView.sol\":\"MockUniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../OpenOraclePriceData.sol\\\";\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapAnchoredView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    bool public constant IS_UNISWAP_ANCHORED_VIEW = true;\\r\\n\\r\\n    /// @notice The Open Oracle Price Data contract\\r\\n    OpenOraclePriceData public immutable priceData;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice The Open Oracle Reporter\\r\\n    address public immutable reporter;\\r\\n\\r\\n    /// @notice The highest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable upperBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable lowerBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\r\\n    uint public immutable anchorPeriod;\\r\\n\\r\\n    /// @notice Official prices by symbol hash\\r\\n    mapping(bytes32 => uint) public prices;\\r\\n\\r\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\r\\n    bool public reporterInvalidated;\\r\\n\\r\\n    /// @notice The old observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public oldObservations;\\r\\n\\r\\n    /// @notice The new observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public newObservations;\\r\\n\\r\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\r\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\r\\n\\r\\n    /// @notice The event emitted when the stored price is updated\\r\\n    event PriceUpdated(string symbol, uint price);\\r\\n\\r\\n    /// @notice The event emitted when anchor price is updated\\r\\n    event AnchorPriceUpdated(string symbol, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\r\\n\\r\\n    /// @notice The event emitted when the uniswap window changes\\r\\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\r\\n\\r\\n    /// @notice The event emitted when reporter invalidates itself\\r\\n    event ReporterInvalidated(address reporter);\\r\\n\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\r\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\r\\n     * @param reporter_ The reporter whose prices are to be used\\r\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\r\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    constructor(OpenOraclePriceData priceData_,\\r\\n                address reporter_,\\r\\n                uint anchorToleranceMantissa_,\\r\\n                uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs) UniswapConfig(configs) public {\\r\\n        priceData = priceData_;\\r\\n        reporter = reporter_;\\r\\n        anchorPeriod = anchorPeriod_;\\r\\n\\r\\n        // Allow the tolerance to be whatever the deployer chooses, but prevent under/overflow (and prices from being 0)\\r\\n        upperBoundAnchorRatio = anchorToleranceMantissa_ > uint(-1) - 100e16 ? uint(-1) : 100e16 + anchorToleranceMantissa_;\\r\\n        lowerBoundAnchorRatio = anchorToleranceMantissa_ < 100e16 ? 100e16 - anchorToleranceMantissa_ : 1;\\r\\n\\r\\n        // Initialize token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.REPORTER) {\\r\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\r\\n                bytes32 symbolHash = config.symbolHash;\\r\\n                uint cumulativePrice = currentCumulativePrice(config);\\r\\n                oldObservations[symbolHash].timestamp = block.timestamp;\\r\\n                newObservations[symbolHash].timestamp = block.timestamp;\\r\\n                oldObservations[symbolHash].acc = cumulativePrice;\\r\\n                newObservations[symbolHash].acc = cumulativePrice;\\r\\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\r\\n            } else {\\r\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n\\r\\n        numTokens = _configs.length;\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for a symbol\\r\\n     * @param symbol The symbol to fetch the price of\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(string memory symbol) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.priceSource == PriceSource.REPORTER) {\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            return mul(prices[config.symbolHash], ethBaseUnit) / usdPerEth;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            return mul(config.fixedPrice, ethBaseUnit) / usdPerEth;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\r\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\r\\n     * @param messages The messages to post to the oracle\\r\\n     * @param signatures The signatures for the corresponding messages\\r\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\r\\n     */\\r\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\r\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\r\\n\\r\\n        // Save the prices\\r\\n        for (uint i = 0; i < messages.length; i++) {\\r\\n            priceData.put(messages[i], signatures[i]);\\r\\n        }\\r\\n\\r\\n        uint ethPrice = fetchEthPrice();\\r\\n\\r\\n        // Try to update the view storage\\r\\n        for (uint i = 0; i < symbols.length; i++) {\\r\\n            postPriceInternal(symbols[i], ethPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function postPriceInternal(string memory symbol, uint ethPrice) internal {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        require(config.priceSource == PriceSource.REPORTER, \\\"only reporter prices get posted\\\");\\r\\n\\r\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\r\\n        uint reporterPrice = priceData.getPrice(reporter, symbol);\\r\\n        uint anchorPrice;\\r\\n        if (symbolHash == ethHash) {\\r\\n            anchorPrice = ethPrice;\\r\\n        } else {\\r\\n            anchorPrice = fetchAnchorPrice(symbol, config, ethPrice);\\r\\n        }\\r\\n\\r\\n        if (reporterInvalidated) {\\r\\n            prices[symbolHash] = anchorPrice;\\r\\n            emit PriceUpdated(symbol, anchorPrice);\\r\\n        } else if (isWithinAnchor(reporterPrice, anchorPrice)) {\\r\\n            prices[symbolHash] = reporterPrice;\\r\\n            emit PriceUpdated(symbol, reporterPrice);\\r\\n        } else {\\r\\n            emit PriceGuarded(symbol, reporterPrice, anchorPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\r\\n        if (reporterPrice > 0) {\\r\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\r\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\r\\n     */\\r\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\r\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\r\\n        if (config.isUniswapReversed) {\\r\\n            return cumulativePrice1;\\r\\n        } else {\\r\\n            return cumulativePrice0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\r\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\r\\n     */\\r\\n    function fetchEthPrice() internal returns (uint) {\\r\\n        return fetchAnchorPrice(\\\"ETH\\\", getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\r\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\r\\n     */\\r\\n    function fetchAnchorPrice(string memory symbol, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\r\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\r\\n\\r\\n        // This should be impossible, but better safe than sorry\\r\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\r\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\r\\n\\r\\n        // Calculate uniswap time-weighted average price\\r\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\r\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\r\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\r\\n        uint anchorPrice;\\r\\n\\r\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\r\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\r\\n        if (config.isUniswapReversed) {\\r\\n            // unscaledPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\\r\\n            anchorPrice = unscaledPriceMantissa / config.baseUnit;\\r\\n        } else {\\r\\n            anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\r\\n        }\\r\\n\\r\\n        emit AnchorPriceUpdated(symbol, anchorPrice, oldTimestamp, block.timestamp);\\r\\n\\r\\n        return anchorPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\r\\n     *  Update new and old observations of lagging window if period elapsed.\\r\\n     */\\r\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\r\\n        bytes32 symbolHash = config.symbolHash;\\r\\n        uint cumulativePrice = currentCumulativePrice(config);\\r\\n\\r\\n        Observation memory newObservation = newObservations[symbolHash];\\r\\n\\r\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\r\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\r\\n        if (timeElapsed >= anchorPeriod) {\\r\\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\\r\\n            oldObservations[symbolHash].acc = newObservation.acc;\\r\\n\\r\\n            newObservations[symbolHash].timestamp = block.timestamp;\\r\\n            newObservations[symbolHash].acc = cumulativePrice;\\r\\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\r\\n        }\\r\\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\r\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\r\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     */\\r\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\r\\n        (string memory decodedMessage, ) = abi.decode(message, (string, address));\\r\\n        require(keccak256(abi.encodePacked(decodedMessage)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\r\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\r\\n        reporterInvalidated = true;\\r\\n        emit ReporterInvalidated(reporter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recovers the source address which signed a message\\r\\n     * @dev Comparing to a claimed address would add nothing,\\r\\n     *  as the caller could simply perform the recover and claim that address.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     * @return The source address which signed the message, presumably\\r\\n     */\\r\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\r\\n        return ecrecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\r\\n        for (uint256 i = 0; i < _configs.length; i++) if (symbolHash == _configs[i].symbolHash) return i;\\r\\n        return uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for symbol\\r\\n     * @param symbol The symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\r\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the symbolHash\\r\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\r\\n        uint index = getSymbolHashIndex(symbolHash);\\r\\n        if (index != uint(-1)) {\\r\\n            return getTokenConfig(index);\\r\\n        }\\r\\n\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x813b225f68f984a453f7a83a95e92d31484fb4c2c97c2123a8bdebdca18d43e4\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\n        TWAP       /// implies the price is set by TWAPs (only available on UniswapView)\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public numTokens;\\n\\n    /// @dev Token config objects\\n    TokenConfig[] internal _configs;\\n\\n    /// @dev Maps underlying addresses to token config indexes\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\n\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\n    \\n    /// @notice Admin address\\n    address public admin;\\n\\n    /**\\n     * @notice Construct an immutable store of configs into the contract data\\n     * @param configs The configs for the supported assets\\n     */\\n    constructor(TokenConfig[] memory configs) public {\\n        admin = msg.sender;\\n\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = i;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n        }\\n\\n        numTokens = _configs.length;\\n    }\\n\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n        admin = newAdmin;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        return getUnderlyingIndex(CErc20(cToken).underlying());\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n        return _configs[i];\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf7625cba988504c9dbd3fcf8b82a56a4ea6ebf70873c549b22a2fe693da92256\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1fd473a96f0ba9307548d22a01cb5d15fad8e4cee0b73a50e32ce24440f36cb7\",\"license\":\"GPL-3.0\"},\"tests/contracts/MockUniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts/Uniswap/UniswapAnchoredView.sol\\\";\\n\\ncontract MockUniswapAnchoredView is UniswapAnchoredView {\\n    mapping(bytes32 => uint) public anchorPrices;\\n\\n    constructor(OpenOraclePriceData priceData_,\\n                address reporter_,\\n                uint anchorToleranceMantissa_,\\n                uint anchorPeriod_,\\n                TokenConfig[] memory configs) UniswapAnchoredView(priceData_, reporter_, anchorToleranceMantissa_, anchorPeriod_, configs) public {}\\n\\n    function setAnchorPrice(string memory symbol, uint price) external {\\n        anchorPrices[keccak256(abi.encodePacked(symbol))] = price;\\n    }\\n\\n    function fetchAnchorPrice(string memory _symbol, TokenConfig memory config, uint _conversionFactor) internal override returns (uint) {\\n        _symbol; // Shh\\n        _conversionFactor; // Shh\\n        return anchorPrices[config.symbolHash];\\n    }\\n}\\n\",\"keccak256\":\"0xea86ec2ea2b3396e55da72ae4747ac930552f1c066ae2422d9d0f2b4cdb66176\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/MockUniswapTokenPair.sol:MockUniswapTokenPair": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reversedMarket\",\"type\":\"bool\"}],\"name\":\"getReservesFraction\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506040516104a33803806104a3833981810160405260a081101561003357600080fd5b508051602082015160408301516060840151608090940151600080546001600160701b0319166001600160701b0395861617600160701b600160e01b031916600160701b9590941694909402929092176001600160e01b0316600160e01b63ffffffff909216919091021782556001929092556002919091556103e79081906100bc90396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635a76f25e1161005b5780635a76f25e1461010b578063642f064e14610113578063c5700a021461014e578063d14393c11461016f57610088565b80630902f1ac1461008d578063443cb4bc146100c55780635909c0d5146100e95780635a3d549314610103575b600080fd5b6100956101b9565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6100cd6101e3565b604080516001600160701b039092168252519081900360200190f35b6100f16101f2565b60408051918252519081900360200190f35b6100f16101f8565b6100cd6101fe565b6101326004803603602081101561012957600080fd5b50351515610214565b604080516001600160e01b039092168252519081900360200190f35b61015661032e565b6040805163ffffffff9092168252519081900360200190f35b6101b7600480360360a081101561018557600080fd5b506001600160701b03813581169160208101359091169063ffffffff6040820135169060608101359060800135610341565b005b6000546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000546001600160701b031681565b60015481565b60025481565b600054600160701b90046001600160701b031681565b600080546001600160701b031661026a576040805162461bcd60e51b815260206004820152601560248201527405265736572766520697320657175616c20746f203605c1b604482015290519081900360640190fd5b600054600160701b90046001600160701b03166102c6576040805162461bcd60e51b815260206004820152601560248201527405265736572766520697320657175616c20746f203605c1b604482015290519081900360640190fd5b81156102fe57600054600160701b81046001600160701b03169060701b600160701b600160e01b0316816102f657fe5b049050610329565b6000546001600160701b03811690600160701b900460701b600160701b600160e01b0316816102f657fe5b919050565b600054600160e01b900463ffffffff1681565b600080546dffffffffffffffffffffffffffff19166001600160701b03968716176dffffffffffffffffffffffffffff60701b1916600160701b9590961694909402949094176001600160e01b0316600160e01b63ffffffff93909316929092029190911790915560015560025556fea2646970667358221220db371910d66685f137ea7adf79e08749b217eef7e2d8714e4a003bc8c7abe0e664736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reversedMarket\",\"type\":\"bool\"}],\"name\":\"getReservesFraction\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapTokenPair.sol\":\"MockUniswapTokenPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/MockUniswapTokenPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\ncontract MockUniswapTokenPair {\\n    uint112 public reserve0;\\n    uint112 public reserve1;\\n    uint32 public blockTimestampLast;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n\\n    constructor(\\n        uint112 reserve0_,\\n        uint112 reserve1_,\\n        uint32 blockTimestampLast_,\\n        uint256 price0CumulativeLast_,\\n        uint256 price1CumulativeLast_\\n    ) public {\\n        reserve0 = reserve0_;\\n        reserve1 = reserve1_;\\n        blockTimestampLast = blockTimestampLast_;\\n        price0CumulativeLast = price0CumulativeLast_;\\n        price1CumulativeLast = price1CumulativeLast_;\\n    }\\n\\n    function update(\\n        uint112 reserve0_,\\n        uint112 reserve1_,\\n        uint32 blockTimestampLast_,\\n        uint256 price0CumulativeLast_,\\n        uint256 price1CumulativeLast_\\n    ) public {\\n        reserve0 = reserve0_;\\n        reserve1 = reserve1_;\\n        blockTimestampLast = blockTimestampLast_;\\n        price0CumulativeLast = price0CumulativeLast_;\\n        price1CumulativeLast = price1CumulativeLast_;\\n    }\\n\\n    function getReserves() external view returns(uint112, uint112, uint32) {\\n        return (reserve0, reserve1, blockTimestampLast);\\n    }\\n\\n    function getReservesFraction(bool reversedMarket) external view returns (uint224) {\\n        require(reserve0 > 0, \\\"Reserve is equal to 0\\\");\\n        require(reserve1 > 0, \\\"Reserve is equal to 0\\\");\\n        if (reversedMarket) {\\n          return (uint224(reserve0) << 112) / reserve1;\\n        } else {\\n          return (uint224(reserve1) << 112) / reserve0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb701290f6bc47261b8a365c775c3d0e9a2b97ef73525854e8308c52d183f60e6\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/ProxyPriceOracle.sol:MockAnchorOracle": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setAnchorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MockCToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506102b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062e4768b14610066578063127ffda014610094578063485feabe146100c05780635e9a523c146100da578063692374e3146101005780639d0405c71461013f575b600080fd5b6100926004803603604081101561007c57600080fd5b506001600160a01b03813516906020013561016b565b005b610092600480360360408110156100aa57600080fd5b506001600160a01b038135169060200135610187565b6100c861020e565b60408051918252519081900360200190f35b6100c8600480360360208110156100f057600080fd5b50356001600160a01b0316610213565b6101266004803603602081101561011657600080fd5b50356001600160a01b0316610225565b6040805192835260208301919091528051918290030190f35b6100926004803603604081101561015557600080fd5b506001600160a01b03813516906020013561023e565b6001600160a01b03909116600090815260208190526040902055565b80600080846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d60208110156101ee57600080fd5b50516001600160a01b031681526020810191909152604001600020555050565b60f081565b60006020819052908152604090205481565b6001602081905260009182526040909120805491015482565b604080518082018252918252670de0b6b3a764000060208084019182526001600160a01b03909416600090815260019485905291909120915182555191015556fea2646970667358221220c3b4ba9e47c62673dedc6b8cb6a4860c4be2d25204dab7f8e4feb0bf3cc300dc64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setAnchorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MockCToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"MockAnchorOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/ProxyPriceOracle.sol:MockCToken": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506040516100f83803806100f88339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556094806100646000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636f307dc314602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea26469706673582212209de6537bdcbc675bd2ee06e3b27f8fcf0f16421663af12c5b1154fd5dc804e3a64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"MockCToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/ProxyPriceOracle.sol:ProxyPriceOracle": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b50610151806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063127ffda014610046578063cfed246b14610074578063fc57d4df146100ac575b600080fd5b6100726004803603604081101561005c57600080fd5b506001600160a01b0381351690602001356100d2565b005b61009a6004803603602081101561008a57600080fd5b50356001600160a01b03166100ee565b60408051918252519081900360200190f35b61009a600480360360208110156100c257600080fd5b50356001600160a01b0316610100565b6001600160a01b03909116600090815260208190526040902055565b60006020819052908152604090205481565b6001600160a01b03166000908152602081905260409020549056fea2646970667358221220f4c9f2825e9fb665b5d7ff6157620294b003d485100c3227ca79ac268b23b64d64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"ProxyPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/Test.sol:TestOverflow": {
      "abi": "[{\"inputs\":[],\"name\":\"testOverflow\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b5060e58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638040cac414602d575b600080fd5b60336035565b005b6801fffffffffffffffe604c565b60405180910390fd5b60026fffffffffffffffffffffffffffffffff82160467ffffffffffffffff8082161460885760405162461bcd60e51b8152600401604390608c565b5050565b60208082526009908201526837bb32b9333637bb9960b91b60408201526060019056fea26469706673582212207dfb0ba73ad65d443d4dc4286370f7e23154c36a0be32b78244565d7aebe986864736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"testOverflow\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/Test.sol\":\"TestOverflow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/Test.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ncontract TestOverflow {\\n\\n    function testOverflow() public pure {\\n        uint128 sum = uint128(uint64(-1)) + uint128(uint64(-1));\\n        require(sum == 36893488147419103230, \\\"overflows\\\");// (2^64 -1)*2\\n        uint64 half = uint64(sum / 2);\\n        require(half == 18446744073709551615, \\\"overflow2\\\");// 2 ^ 64 - 1\\n    }\\n}\\n\",\"keccak256\":\"0x54896be410933145616d842ffd8a5052b3e6736a414fb84c0f8bb9dd7abb5487\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    }
  },
  "version": "0.6.12+commit.27d51765.Linux.g++"
}